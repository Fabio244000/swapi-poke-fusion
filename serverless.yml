service: swapi-poke-fusion
frameworkVersion: '^4'

plugins:
  - serverless-offline
  - serverless-iam-roles-per-function

custom:
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3002

    # --- dominio custom ----------------------------
  customDomain:
    domainName: api.swapi-poke.dev
    basePath: ''
    stage: ${self:provider.stage}
    certificateArn: arn:aws:acm:us-east-1:381492225773:certificate/04accdf2-7e0e-4000-aa17-51d7afcb3e14
    endpointType: regional
    securityPolicy: tls_1_2
    http:
      enabled: true

provider:
  name: aws
  runtime: nodejs20.x
  architecture: arm64
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  vpc:
    subnetIds:
      - subnet-02aebea3881885c49
      - subnet-07d5d21a3558ec3b4
    securityGroupIds:
      - !Ref RedisSecurityGroup

  environment:
    DDB_TABLE: ${self:service}-tbl-${self:provider.stage}
    REDIS_HOST: ${ssm:/fusion/${self:provider.stage}/redis_host}
    REDIS_PORT: ${ssm:/fusion/${self:provider.stage}/redis_port}
    REDIS_TTL: ${ssm:/fusion/${self:provider.stage}/redis_ttl}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"

  httpApi:
    authorizers:
      cognitoAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
        audience:
          - !Ref UserPoolClient

package:
  individually: true

functions: ${file(./functions.yml)}

resources:
  Resources:
    # ---------- DynamoDB ----------
    FusionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DDB_TABLE}
        BillingMode: PAY_PER_REQUEST
        SSESpecification:
          SSEEnabled: true
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: gsi1
            Projection: { ProjectionType: ALL }
            KeySchema:
              - AttributeName: pk
                KeyType: HASH
              - AttributeName: sk
                KeyType: RANGE

    # ---------- Cognito ----------
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-up-${self:provider.stage}

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref UserPool
        GenerateSecret: false

    # ---------- Redis (ElastiCache) ----------
    RedisSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow Lambda to Redis
        VpcId: vpc-0288215141563045a

    RedisIngressSelf:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupId: !Ref RedisSecurityGroup
        SourceSecurityGroupId: !Ref RedisSecurityGroup
        IpProtocol: tcp
        FromPort: 6379
        ToPort: 6379

    RedisSubnetGroup:
      Type: AWS::ElastiCache::SubnetGroup
      Properties:
        Description: Subnet group for Redis
        SubnetIds:
          - subnet-02aebea3881885c49
          - subnet-07d5d21a3558ec3b4

    RedisCluster:
      Type: AWS::ElastiCache::CacheCluster
      Properties:
        CacheNodeType: cache.t3.micro
        Engine: redis
        NumCacheNodes: 1
        CacheSubnetGroupName: !Ref RedisSubnetGroup
        VpcSecurityGroupIds:
          - !Ref RedisSecurityGroup
        AutoMinorVersionUpgrade: true

  # ---------- Outputs ----------
  Outputs:
    CognitoPoolId:
      Description: Cognito User Pool ID
      Value: !Ref UserPool
      Export:
        Name: ${self:service}-${self:provider.stage}-userpool-id

    CognitoClientId:
      Description: Cognito App Client ID
      Value: !Ref UserPoolClient
      Export:
        Name: ${self:service}-${self:provider.stage}-appclient-id

    RedisEndpoint:
      Description: Redis primary endpoint
      Value: !GetAtt RedisCluster.RedisEndpoint.Address
      Export:
        Name: ${self:service}-${self:provider.stage}-redis-endpoint
