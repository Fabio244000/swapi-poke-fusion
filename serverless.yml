service: swapi-poke-fusion
frameworkVersion: ">=3.0.0 <5.0.0"

plugins:
  - serverless-offline
  - serverless-iam-roles-per-function

custom:
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3002

provider:
  name: aws
  runtime: nodejs20.x
  architecture: arm64
  region: us-east-1
  stage: ${opt:stage, 'dev'}

  environment:
    # DynamoDB
    DDB_TABLE: ${self:service}-tbl-${self:provider.stage}

    # Redis
    REDIS_HOST: ${ssm:/fusion/${self:provider.stage}/redis_host~true}
    REDIS_PORT: "6379"
    REDIS_TTL: "1800"

    # Cognito
    USER_POOL_ID:       ${ssm:/fusion/${self:provider.stage}/user_pool_id~true}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"

  httpApi:
    authorizers:
      cognitoAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: >-
          https://cognito-idp.${aws:region}.amazonaws.com/${ssm:/fusion/${self:provider.stage}/user_pool_id~true}
        audience:
          - ${ssm:/fusion/${self:provider.stage}/user_pool_client_id~true}

package:
  individually: true

functions: ${file(./functions.yml)}

resources:
  Resources:

    # DynamoDB
    FusionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DDB_TABLE}
        BillingMode: PAY_PER_REQUEST
        SSESpecification:
          SSEEnabled: true
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: gsi1
            Projection: { ProjectionType: ALL }
            KeySchema:
              - AttributeName: pk
                KeyType: HASH
              - AttributeName: sk
                KeyType: RANGE

    # Cognito User Pool
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-up-${self:provider.stage}

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref UserPool
        GenerateSecret: false

  Outputs:
    CognitoPoolId:
      Description: Cognito User Pool ID
      Value: !Ref UserPool
    CognitoClientId:
      Description: Cognito App Client ID
      Value: !Ref UserPoolClient
